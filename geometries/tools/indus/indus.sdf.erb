<?xml version='1.0'?>
<sdf version="1.6">
<model name="multicopter">

	<!-- ** Links Definitions ** -->
	<!-- * Base Definitions * -->
	<link name="base_link">
		<!-- Position -->
		<pose>0 0 0.35 0 -0 0</pose>
		<!-- Inertia -->
		<%= inertia(base_m, base_xxi, base_xyi, base_xzi, base_yyi, base_yzi, base_zzi) %>
		
		<!-- collision -->
		<collision name="base_link_colision">
			<pose frame=>0 0 0 0 0 0</pose>
			<geometry>
				<box>
					<size> 0.45 2.5 0.30 </size>
				</box>
			</geometry>
			<surface>
				<contact>
					<ode>
						<min_depth>0.001</min_depth>
						<max_vel>0</max_vel>
					</ode>
				</contact>
				<friction>
					<ode/>
				</friction>
			</surface>
		</collision>
		
		<!-- Visual -->
		<% if File.exists? File.join('confidential/meshes/untitled.stl') %>
		<%= visual_box('base_link_column_right', 0.74, 0.03, 0.03, 'Grey', [0, -0.475, 0.01, 0, -0, 0]) %>
		
		<%= visual_ext('base_link', "model://DACAR/meshes/untitled.stl", 'White', [0.17, 0, 0.02, 0, -0, 1.5708], [0.001,0.001,0.001]) %>

		<%= visual_box('base_link_column_left', 0.74, 0.03, 0.03, 'Grey', [0, 0.475, 0.01, 0, -0, 0]) %>
		<% else %>
		
		<%= visual_cylinder('base_link', base_radius, base_length, 'DarkGrey') %>
		<% end %>
		
		<gravity>1</gravity>
      		<velocity_decay/>
	</link>


		
	<link name="/imu_link">
		<!-- Position -->
		<pose>0 0 0.35 0 -0 0</pose>
		<!-- Inertia -->
		<%= inertia(imu_m, imu_xxi, imu_xyi, imu_xzi, imu_yyi, imu_yzi, imu_zzi) %>
		
	</link>
	
	<%= joint('imu', 'revolute', '/imu_link', 'base_link', 1, 0, 0, 0, 0)%>
	
	
	<link name='right_elevon'>
	        <!-- Position -->
	        <pose frame=''>-0.124720 -0.829266 0.396834 -0.093490 0.001436 0.016471</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>
		                                               
		<!-- collision -->
		<%= collision_wing('right_elevon', 0.058634, 0.391614, 0.000598) %>

		<!-- Visual -->
		<%= visual_box('right_elevon', 0.058634, 0.582127, 0.000598, 'Grey') %>
	</link>
	<%= joint('right_elevon', 'revolute', 'right_elevon', 'base_link', 0, 1, 0, -0.25, 0.25,[0.025, 0.28, -0.005, 0, -0, 0], [0,0,2], true)%>

	
	<link name='left_elevon'>
	        <!-- Position -->
	        <pose frame=''>-0.124720 0.829266 0.396834 0.093490 0.001436 -0.016471</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>

		<!-- collision -->
		<%= collision_wing('left_elevon', 0.058634, 0.391614, 0.000598) %>

		<!-- Visual -->
		<%= visual_box('left_elevon', 0.058634, 0.582127, 0.000598, 'Grey') %>
	</link>
	<%= joint('left_elevon', 'revolute', 'left_elevon', 'base_link', 0, 1, 0, -0.25, 0.25,[0.025, -0.28, -0.005, 0, -0, 0], [0,0,2],true)%>


	<link name='right_airbreak'>
	        <!-- Position -->
	        <pose frame=''>-0.132948 -0.232139 0.368761 0 -0.000108 0</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>

		<!-- collision -->
		<%= collision_wing('right_airbreak', 0.058634, 0.391614, 0.000598) %>

		<!-- Visual -->
		<%= visual_box('right_airbreak', 0.058634 ,0.391614 ,0.000598, 'Grey') %>
	</link>
	<%= joint('right_airbreak', 'revolute', 'right_airbreak', 'base_link', 0, 1, 0, -0.25, 0.25,[0.025, 0.18, -0.005, 0, -0, 0], [0,0,2],true)%>
	
	<link name='left_airbreak'>
	        <!-- Position -->
	        <pose frame=''>-0.132948 0.2354 0.368768 0 -5.4e-05 0</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>

		<!-- collision -->
		<%= collision_wing('left_airbreak', 0.058634, 0.391614, 0.000598) %>

		<!-- Visual -->
		<%= visual_box('left_airbreak', 0.058634 ,0.391614 ,0.000598, 'Grey') %>
	</link>
	<%= joint('left_airbreak', 'revolute', 'left_airbreak', 'base_link', 0, 1, 0, -0.25, 0.25,[0.025, -0.18, -0.005, 0, -0, 0], [0,0,2],true)%>

	<link name='queue_ag'>
	        <!-- Position -->
	        <pose frame=''>-1.26985 0.175395 0.33711 0.613889 -0.000186 3e-06</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>

		<!-- collision -->
		<%= collision_wing('queue_ag', 0.058634, 0.391614 ,0.000598) %>

		<!-- Visual -->
		<%= visual_box('queue_ag', 0.058634, 0.391614 ,0.000598, 'Grey') %>
	</link>
	<%= joint('queue_ag', 'revolute', 'queue_ag', 'base_link', 0, 1, 0, -0.53, 0.53,[0.03, 0, 0, 0, -0, 0], [0,0,2],true)%>

	<link name='queue_ad'>
	        <!-- Position -->
	        <pose frame=''>-1.26985 -0.175395 0.33711 -0.613889 -0.000186 3e-06</pose>
		<!-- Inertia -->
		<%= inertia(0.00000000001, 0.000000001, 0, 0, 0.000000001, 0, 0.000000001) %>

		<!-- collision -->
		<%= collision_wing('queue_ad', 0.058634, 0.391614 ,0.000598) %>

		<!-- Visual -->
		<%= visual_box('queue_ad', 0.058634, 0.391614 ,0.000598, 'Grey') %>
	</link>
	<%= joint('queue_ad', 'revolute', 'queue_ad', 'base_link', 0, 1, 0, -0.53, 0.53,[0.03, 0, 0, 0, -0, 0], [0,0,2],true)%>
	
	

	<% (0..nb_rotor-1).each do |index| %>
		<% 	
			theta = -(rotor_ang_offset+ Math::PI*2/nb_rotor*index)
			if const_ang == false
				theta=-rotor_angles[index]
			end

			pos_rotor = [
				arm_length*Math.cos(theta),
				arm_length*Math.sin(theta),
				0.42-0.1*(index-(index/2)*2),
				0,
				0,
				0]
			rotor_name = "rotor_" + index.to_s

			pos_tilt = [
				arm_length*Math.cos(theta),
				arm_length*Math.sin(theta),
				0.37,
				0,
				0,
				0]
			tilt_name = "tilt_motor_" + index.to_s	
			color = 'Blue'
			if (index-(index/2)*2)*2-1 == -1
				color = 'DarkGrey'
			end
			if alt_dir == true
			        if rotor_dir[index] == 'CCW'
			                color = 'Blue'
			        else
			                color = 'DarkGrey'
				end
			end
			
		%>


	<link name="<%= tilt_name %>">
		<!-- Position -->
		<pose> <%= a_to_s(pos_tilt)%> </pose>
		<!-- Inertia -->
		<%= inertia(tilt_motor_m, tilt_motor_xxi, tilt_motor_xyi, tilt_motor_xzi, tilt_motor_yyi, tilt_motor_yzi, tilt_motor_zzi) %>
		
		<!-- collision -->
		<%= collision_cylinder(tilt_name, tilt_motor_radius, tilt_motor_length,  [0,0,0, Math::PI/2, 0,0]) %>

		<!-- Visual -->
		<%= visual_cylinder(tilt_name, tilt_motor_radius, tilt_motor_length, 'DarkGrey', [0,0,0, Math::PI/2, 0,0]) %>
		
		<gravity>1</gravity>
		<velocity_decay/>
	      </link>
	
	      
	<%= joint(tilt_name, 'revolute', tilt_name, 'base_link', 0, 1 -2*(index%2), 0,  -190*Math::PI/180, 190*Math::PI/180)%>

	<% if index >1 %>
	<%= gearJoint(tilt_name+"_gear", tilt_name, "tilt_motor_" + (3-index).to_s, "base_link", 0, 1 -2*(index/2), 0)%>
	<%end%>
	
	<link name="<%= rotor_name %>">
		<!-- Position -->
		<pose> <%= a_to_s(pos_rotor)%> </pose>
		<!-- Inertia -->
		<%= inertia(rotor_m, rotor_xxi, rotor_xyi, rotor_xzi, rotor_yyi, rotor_yzi, rotor_zzi) %>
		
		<!-- collision -->
		<%= collision_cylinder(rotor_name, rotor_radius, rotor_length) %>
		
		<!-- Visual -->
		<%= visual_ext(rotor_name, 'model://rotors_description/meshes/iris_prop_ccw.dae', color) %>
		
		<gravity>1</gravity>
		<velocity_decay/>
	</link>
	<%= joint(rotor_name, 'revolute', rotor_name, tilt_name, 0, 0, 1, -1e+16, 1e+16)%>

	
		
	<% end %>
	
	<plugin name='rosbag' filename='libgazebo_multirotor_base_plugin.so'>
		<robotNamespace/>
		<linkName>base_link</linkName>
		<rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
	</plugin>
	
	<% (0..nb_rotor-1).each do |index| %>
		<% 	
			dir = "ccw"
			if (index-(index/2)*2)*2-1 == -1
				dir = "cw"
			end
				
			if alt_dir == true
			        dir = rotor_dir[index].downcase
			end
			
		%>
		
	<plugin name='motor_<%= index.to_s%>_model' filename='libgazebo_motor_model.so'>
		<robotNamespace/>
		<jointName>			rotor_<%= index.to_s%>_joint			</jointName>
		<linkName>			rotor_<%= index.to_s%>			</linkName>
		<turningDirection>		<%= dir %>				</turningDirection>
		<timeConstantUp>		0.0125				</timeConstantUp>
		<timeConstantDown>		0.025				</timeConstantDown>
		<maxRotVelocity>		<%= maxRotVelocity.to_s%>				</maxRotVelocity>
		<motorConstant>		<%= motorConstant.to_s%>			</motorConstant>
		<momentConstant>		<%= momentConstant.to_s%>				</momentConstant>
		<commandSubTopic>		/gazebo/command/motor_speed	</commandSubTopic>
		<motorNumber>			<%= index.to_s%>				</motorNumber>
		<rotorDragCoefficient>		<%= rotorDragCoefficient.to_s%>			</rotorDragCoefficient>
		<rollingMomentCoefficient>	<%= rollingMomentCoefficient.to_s%>			</rollingMomentCoefficient>
		<motorSpeedPubTopic>		/motor_speed/<%= index.to_s%>			</motorSpeedPubTopic>
		<rotorVelocitySlowdownSim>	10				</rotorVelocitySlowdownSim>
	</plugin>
		
	<% end %>

	<model name='gps0'>
	<link name='link'>
	<pose frame=''>0 0 0 0 -0 0</pose>
	<inertial>
	  <pose frame=''>0 0 0 0 -0 0</pose>
	  <mass>0.01</mass>
	  <inertia>
	    <ixx>2.1733e-06</ixx>
	    <ixy>0</ixy>
	    <ixz>0</ixz>
	    <iyy>2.1733e-06</iyy>
	    <iyz>0</iyz>
	    <izz>1.8e-07</izz>
	  </inertia>
	</inertial>
	<visual name='visual'>
	  <geometry>
	    <cylinder>
	      <radius>0.01</radius>
	      <length>0.002</length>
	    </cylinder>
	  </geometry>
	  <material>
	    <script>
	      <name>Gazebo/Black</name>
	      <uri>__default__</uri>
	    </script>
	  </material>
	</visual>
	<sensor name='gps' type='gps'>
	  <pose frame=''>0 0 0 0 -0 0</pose>
	  <plugin name='gps_plugin' filename='libgazebo_gps_plugin.so'>
	    <robotNamespace/>
	    <gpsNoise>1</gpsNoise>
	    <gpsXYRandomWalk>2.0</gpsXYRandomWalk>
	    <gpsZRandomWalk>4.0</gpsZRandomWalk>
	    <gpsXYNoiseDensity>0.0002</gpsXYNoiseDensity>
	    <gpsZNoiseDensity>0.0004</gpsZNoiseDensity>
	    <gpsVXYNoiseDensity>0.2</gpsVXYNoiseDensity>
	    <gpsVZNoiseDensity>0.4</gpsVZNoiseDensity>
	  </plugin>
	</sensor>
	</link>
	</model>
	<joint name='gps0_joint' type='fixed'>
	<parent>base_link</parent>
	<child>gps0::link</child>
	</joint>
	<plugin name='groundtruth_plugin' filename='libgazebo_groundtruth_plugin.so'>
	<robotNamespace/>
	</plugin>
	<plugin name='magnetometer_plugin' filename='libgazebo_magnetometer_plugin.so'>
		<robotNamespace/>
		<pubRate>100</pubRate>
		<noiseDensity>0.0004</noiseDensity>
		<randomWalk>6.4e-06</randomWalk>
		<biasCorrelationTime>600</biasCorrelationTime>
		<magTopic>/mag</magTopic>
	</plugin>
	<plugin name='barometer_plugin' filename='libgazebo_barometer_plugin.so'>
		<robotNamespace/>
		<pubRate>50</pubRate>
		<baroTopic>/baro</baroTopic>
	</plugin>
	
	<plugin name='mavlink_interface' filename='libgazebo_mavlink_interface.so'>
		<robotNamespace/>
		<imuSubTopic>/imu</imuSubTopic>
		<gpsSubTopic>/gps</gpsSubTopic>
		<magSubTopic>/mag</magSubTopic>
		<baroSubTopic>/baro</baroSubTopic>
		<mavlink_addr>INADDR_ANY</mavlink_addr>
		<mavlink_udp_port>14560</mavlink_udp_port>
		<mavlink_tcp_port>4560</mavlink_tcp_port>
		<serialEnabled>0</serialEnabled>
		<serialDevice>/dev/ttyACM0</serialDevice>
		<baudRate>921600</baudRate>
		<qgc_addr>INADDR_ANY</qgc_addr>
		<qgc_udp_port>14550</qgc_udp_port>
		<sdk_addr>INADDR_ANY</sdk_addr>
		<sdk_udp_port>14540</sdk_udp_port>
		<hil_mode>0</hil_mode>
		<hil_state_level>0</hil_state_level>
		<vehicle_is_tailsitter>0</vehicle_is_tailsitter>
		<send_vision_estimation>0</send_vision_estimation>
		<send_odometry>1</send_odometry>
		<enable_lockstep>1</enable_lockstep>
		<use_tcp>1</use_tcp>
		<motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
		<control_channels>
		<% (0..nb_rotor-1).each do |index| %>
	<channel name='rotor<%= (index).to_s%>'>
	                        <input_index><%= index.to_s%></input_index>
				<input_scaling><%= ESC_gain_in_rad_per_sec %></input_scaling>
				<input_offset>0</input_offset>
				<zero_position_disarmed>0 </zero_position_disarmed>
				<zero_position_armed><%= ESC_offset_in_rad_per_sec %></zero_position_armed>
				<joint_name>rotor_<%= (index).to_s%>_joint</joint_name>
				<joint_control_type>velocity</joint_control_type>
			</channel>
	
		<% end %>
			
		<% (0..2-1).each do |index| %>
		<%
		pwm_tilt_max = [PWM_TILT_MAX1, PWM_TILT_MAX2]
		pwm_tilt_min = [PWM_TILT_MIN1, PWM_TILT_MIN2]
		ang_tilt_max = [ANG_TILT_MAX1, ANG_TILT_MAX2]
		ang_tilt_min = [ANG_TILT_MIN1, ANG_TILT_MIN2]

		pwm_max = 2000.0
		pwm_min = 1000.0
		
		alpha_max = (2*pwm_tilt_max[index] - (pwm_max+pwm_min))/(pwm_max-pwm_min)
		alpha_min = (2*pwm_tilt_min[index] - (pwm_max+pwm_min))/(pwm_max-pwm_min)
		alpha_a = (-1-1)/(ang_tilt_min[index] - ang_tilt_max[index])
		alpha_b = -1 - alpha_a*ang_tilt_min[index]

		tilt_scale = 2/(alpha_max-alpha_min)/alpha_a
		tilt_offset =  -(alpha_max+alpha_min)/(alpha_max-alpha_min)/alpha_a -alpha_b/alpha_a
		
		%>
		
	                <channel name="tilt_motor_<%= (index).to_s%>">
			        <input_index>            <%= (index+4).to_s%>                  </input_index>
				<input_scaling>  <%= tilt_scale %> </input_scaling>
				<input_offset>           0                  </input_offset>
				<zero_position_disarmed> 0                  </zero_position_disarmed>
				<zero_position_armed>    <%= tilt_offset %> </zero_position_armed>
				<joint_control_type>     position           </joint_control_type>
				<joint_name>             tilt_motor_<%= (index).to_s%>_joint </joint_name>
				 <joint_control_pid>
				   <p>0.1</p>
				   <i>0</i>
				   <d>0.01</d>
				   <iMax>0.0</iMax>
				   <iMin>0.0</iMin>
<% if index==0 %>
				   <cmdMax><%= 90*Math::PI/180 %></cmdMax>
				   <cmdMin><%= -90*Math::PI/180 %></cmdMin>
<% else %>
				   <cmdMax><%= 90*Math::PI/180 %></cmdMax>
				   <cmdMin><%= -90*Math::PI/180 %></cmdMin>
<% end %>
				 </joint_control_pid>
			</channel>
		<% end %>
			
		</control_channels>
	</plugin>
	
	<static>0</static>
	<plugin name='rotors_gazebo_imu_plugin' filename='libgazebo_imu_plugin.so'>
		<robotNamespace/>
		<linkName>/imu_link</linkName>
		<imuTopic>/imu</imuTopic>
		<gyroscopeNoiseDensity>0.00018665</gyroscopeNoiseDensity>
		<gyroscopeRandomWalk>3.8785e-05</gyroscopeRandomWalk>
		<gyroscopeBiasCorrelationTime>1000.0</gyroscopeBiasCorrelationTime>
		<gyroscopeTurnOnBiasSigma>0.0087</gyroscopeTurnOnBiasSigma>
		<accelerometerNoiseDensity>0.00186</accelerometerNoiseDensity>
		<accelerometerRandomWalk>0.006</accelerometerRandomWalk>
		<accelerometerBiasCorrelationTime>300.0</accelerometerBiasCorrelationTime>
		<accelerometerTurnOnBiasSigma>0.196</accelerometerTurnOnBiasSigma>
	</plugin>
	
</model>
</sdf>
