<%
#<!--
############# MACRO BOX  ##############
def box(dx, dy, dz)
'<collision name="collision">
        <geometry>
         <box>
	     <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size>
	 </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <box>
	     <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size>
	 </box>
        </geometry>
      </visual>'
    end
##########################################
#-->

#<!--
############# MACRO BOX Visual ##############
def visual_box(name, dx, dy, dz, color, pos=[0,0,0,0,0,0])
'<visual name="' + name + '_visual">
			<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
			<geometry>
				<box>
					<size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size>
	 			</box>
			</geometry>
			<material>
				<script>
					<name>Gazebo/' + color + '</name>
					<uri>file://media/materials/scripts/gazebo.material</uri>
				</script>
				<shader type=\'pixel\'/>
          			<emissive>0 0 0 1</emissive>
			</material>
			<transparency>0</transparency>
        		<cast_shadows>1</cast_shadows>
		</visual>'
    end
##########################################
#-->

#<!--
############# MACRO wing Collision ##############
def collision_wing(name, dx, dy, dz, pos=[0,0,0,0,0,0])
'<collision name="' + name + '_colision">
			<laser_retro>0</laser_retro>
			<max_contacts>10</max_contacts>
			<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
			<geometry>
				<box>
					<size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size>
				</box>
			</geometry>
			<surface>
				<friction>
					<ode>
						<mu>1</mu>
						<mu2>1</mu2>
						<fdir1>0 0 0</fdir1>
						<slip1>0</slip1>
						<slip2>0</slip2>
					</ode>
					<torsional>
						<coefficient>1</coefficient>
						<patch_radius>0</patch_radius>
						<surface_radius>0</surface_radius>
						<use_patch_radius>1</use_patch_radius>
						<ode>
							<slip>0</slip>
						</ode>
					</torsional>
				</friction>
				<bounce>
					<restitution_coefficient>0</restitution_coefficient>
					<threshold>1e+06</threshold>
				</bounce>
				<contact>
					<collide_without_contact>0</collide_without_contact>
					<collide_without_contact_bitmask>1</collide_without_contact_bitmask>
					<collide_bitmask>1</collide_bitmask>
					<ode>
						<soft_cfm>0</soft_cfm>
						<soft_erp>0.2</soft_erp>
						<kp>1e+13</kp>
						<kd>1</kd>
						<max_vel>0.01</max_vel>
						<min_depth>0</min_depth>
					</ode>
					<bullet>
						<split_impulse>1</split_impulse>
						<split_impulse_penetration_threshold>-0.01</split_impulse_penetration_threshold>
						<soft_cfm>0</soft_cfm>
						<soft_erp>0.2</soft_erp>
						<kp>1e+13</kp>
						<kd>1</kd>
					</bullet>
				</contact>
			</surface>
		</collision>'
    end
##########################################
#-->

#<!--
############# MACRO CYLINDER Collision ##############
def collision_cylinder(name, radius, length, pos=[0,0,0,0,0,0])
'<collision name="' + name + '_colision">
			<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
			<geometry>
				<cylinder>
					<radius> ' + radius.to_s + ' </radius>
					<length> ' + length.to_s + ' </length>
				</cylinder>
			</geometry>
			<surface>
				<contact>
					<ode>
						<min_depth>0.001</min_depth>
						<max_vel>0</max_vel>
					</ode>
				</contact>
				<friction>
					<ode/>
				</friction>
			</surface>
		</collision>'
    end
##########################################
#-->

#<!--
############# MACRO CYLINDER Visual ##############
def visual_cylinder(name, radius, length, color, pos=[0,0,0,0,0,0])
'<visual name="' + name + '_visual">
			<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
			<geometry>
				<cylinder>
					<radius> ' + radius.to_s + ' </radius>
					<length> ' + length.to_s + ' </length>
				</cylinder>
			</geometry>
			<material>
				<script>
					<name>Gazebo/' + color + '</name>
					<uri>file://media/materials/scripts/gazebo.material</uri>
				</script>
			</material>
			</visual>'
    end
##########################################
#-->

#<!--
############# MACRO VISUAL EXT ##############
def visual_ext(name, uri, color, pos=[0,0,0,0,0,0], scale=[1,1,1])
'<visual name="' + name + '_visual">
			<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
			<geometry>
				<mesh>
					<scale>'+ scale[0].to_s + ' '+ scale[1].to_s + ' '+ scale[2].to_s+ '</scale>
					<uri>'+uri+'</uri>
				</mesh>
			</geometry>
			<material>
				<script>
					<name>Gazebo/' + color + '</name>
					<uri>__default__</uri>
				</script>
				<shader type=\'pixel\'/>
          			<emissive>0 0 0 1</emissive>
			</material>
			<transparency>0</transparency>
        		<cast_shadows>1</cast_shadows>
		</visual>'
    end
##########################################
#-->


#<!--
############# MACRO SPHERE  ##############
def sphere(radius)
'<collision name="collision">
        <geometry>
          <sphere>
	    <radius> ' + radius.to_s + ' </radius>
	 </sphere>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <sphere>
	    <radius> ' + radius.to_s + ' </radius>
	 </sphere>
        </geometry>
      </visual>'
end
##########################################
#-->

#<!--
############# MACRO BOX  ##############
def inertia(m, xx, xy, xz, yy, yz, zz)
'<inertial>
			<pose frame=''>0 0 0 0 -0 0</pose>
			<mass> ' + m.to_s + '</mass>
			<inertia>
				<ixx>' +  xx.to_s + '</ixx>
				<ixy>' + xy.to_s + '</ixy>
				<ixz>' + xz.to_s + '</ixz>
				<iyy>' + yy.to_s + '</iyy>
				<iyz>' + yz.to_s + '</iyz>
				<izz>' + zz.to_s + '</izz>
			</inertia>
		</inertial>'
    end
##########################################
#-->

#<!--
############# MACRO Joint  ##############
def joint(name, type, child, parent, dx, dy, dz, lmin, lmax, pos=[0,0,0,0,0,0], dynamic=[0,0,0], physics=false)
'<joint name="' + name + '_joint" type="'+type+'">
		<child>' + child + '</child>
		<parent>' + parent + '</parent>
		<pose frame=''>'+ pos[0].to_s + ' '+ pos[1].to_s + ' '+ pos[2].to_s+ ' ' + pos[3].to_s + ' '+ pos[4].to_s + ' '+ pos[5].to_s + '</pose>
		<axis>
			<xyz>'+dx.to_s+' '+dy.to_s+' '+dz.to_s+'</xyz>
			<limit>
				<lower>'+lmin.to_s+'</lower>
				<upper>'+lmax.to_s+'</upper>
			</limit>
			<dynamics>
				<spring_reference>'+ dynamic[0].to_s + '</spring_reference>
				<spring_stiffness>'+ dynamic[1].to_s + '</spring_stiffness>
				<damping>'+ dynamic[2].to_s + '</damping>
			</dynamics>
			<use_parent_model_frame>1</use_parent_model_frame>
		</axis>
		' +
		(if(physics==true)
		then
		'<physics>
			<ode>	
          			<implicit_spring_damper>1</implicit_spring_damper>
        		</ode>
      		</physics>'
		else
		''
		end)+ '
	</joint>'
    end
##########################################
#-->

#<!--
############# MACRO Gear  ##############
def gearJoint(name, child, parent, fixed, dx, dy, dz)
'<joint name="' + name + '_joint" type="gearbox">
		<child>' + child + '</child>
		<parent>' + parent + '</parent>
		<gearbox_ratio>-1</gearbox_ratio>
		<gearbox_reference_body>' + fixed + '</gearbox_reference_body>
		<axis>
			<xyz>'+dx.to_s+' '+dy.to_s+' '+dz.to_s+'</xyz>
		</axis>
		<axis2>
			<xyz>'+dx.to_s+' '+dy.to_s+' '+dz.to_s+'</xyz>
		</axis2>
	</joint>'
    end
##########################################
#-->
   

#<!--
############# MACRO ANGLE  ##############
def a_to_s(arr)
' ' + arr[0].to_s + ' ' + arr[1].to_s + ' ' + arr[2].to_s + ' ' + arr[3].to_s + ' ' + arr[4].to_s + ' ' + arr[5].to_s
end
##########################################
#-->

#<!--
############# MACRO disp  ##############
def a_to_str_py(arr)
arr[0].round(4).to_s + ', ' + arr[1].round(4).to_s + ', ' + arr[2].round(4).to_s 
end
##########################################
#-->

#<!--
############# MACRO NORM  ##############
def norm(arr,arr2)
	Math.sqrt((arr[0]-arr2[0])**2+(arr[1]-arr2[1])**2+(arr[2]-arr2[2])**2)
end
##########################################
#-->


%>